#!/bin/bash
# Build asterisk (download, compile, install) with many options
# Usage: build-asterisk {version} {svn-revision}
# Options:
#	-i = install after build succeds
#	-i(path) = install to local path (see local-asterisk)
#	-n = do not install (otherwise it prompts)
#	-v = build into directory with the version number (no suffix)
#	-c = use certified branch
#
# If not supplied with a version a list is given to choose from
# If not provided an svn-revsion the latest is used

[ -f /etc/redhat-release ] && [ ! -f /etc/yum.repos.d/epel.repo ] && echo "WARNING: epel required for libjansson" && yum-epel
install-packages dmidecode subversion gcc-c++/gcc-4.4 ncurses-devel/libncurses-dev libxml2-devel/libxml2-dev make wget openssl-devel/libcurl4-openssl-dev newt-devel/libnewt-dev kernel-devel/ sqlite-devel/libsqlite-dev libuuid-devel/uuid-dev gtk2-devel/libgtk2.0-dev jansson-devel/libjansson-dev binutils-devel/binutils-dev /pkg-config patch avahi-devel
[ ! -f /usr/lib/libpjsip.so -a ! -f /usr/lib64/libpjsip.so ] && install-pjsip

install_tls()
{
	[ ! -f ./contrib/scripts/ast_tls_cert ] && echo "ERROR: Not in an Asterisk directory" && exit 1
	[ ! -d /etc/asterisk/keys ] && mkdir /etc/asterisk/keys
	./contrib/scripts/ast_tls_cert -C $HOSTNAME -O "Acme Branch Company" -d /etc/asterisk/keys
	[ ! -f /etc/asterisk/keys/ca.crt ] && echo "ERROR: ca.crt not found" && exit 1
	[ ! -f /etc/asterisk/keys/ca.key ] && echo "ERROR: ca.keys not found" && exit 1
	./contrib/scripts/ast_tls_cert -m client -c /etc/asterisk/keys/ca.crt -k /etc/asterisk/keys/ca.key -C $HOSTNAME -O "Acme Branch Company" -d /etc/asterisk/keys -o user
	ls /etc/asterisk/keys
}

# TODO: add "FreePBX Compatible" built option:
#
# Asterisk 13:
#   menuselect/menuselect --disable-category MENUSELECT_CORE_SOUNDS --disable-category MENUSELECT_EXTRA_SOUNDS --disable-category MENUSELECT_MOH --enable-category MENUSELECT_ADDONS --enable res_pktccops --enable chan_mgcp --enable chan_motif --enable app_meetme --enable app_page --enable res_snmp --enable res_srtp --enable DONT_OPTIMIZE --disable BUILD_NATIVE --disable res_calendar --disable res_calendar_caldav --disable res_calendar_ews --disable res_calendar_exchange --disable res_calendar_icalendar #
# Asterisk 12:
#   menuselect/menuselect --disable-category MENUSELECT_CORE_SOUNDS --disable-category MENUSELECT_EXTRA_SOUNDS --disable-category MENUSELECT_MOH --enable-category MENUSELECT_ADDONS --enable res_pktccops --enable chan_mgcp --enable chan_motif --enable app_dahdibarge --enable app_meetme --enable app_page --enable res_snmp --enable res_srtp --enable DONT_OPTIMIZE --disable BUILD_NATIVE  #
# Asterisk 11:
#   menuselect/menuselect --disable-category MENUSELECT_CORE_SOUNDS --disable-category MENUSELECT_EXTRA_SOUNDS --disable-category MENUSELECT_MOH --enable-category MENUSELECT_ADDONS --enable res_pktccops --enable chan_mgcp --enable chan_motif --enable app_dahdibarge --enable app_meetme --enable app_page --enable res_mwi_blf --enable res_snmp --enable res_srtp --enable DONT_OPTIMIZE --disable BUILD_NATIVE --disable res_calendar --disable res_calendar_caldav --disable res_calendar_ews --disable res_calendar_exchange --disable res_calendar_icalendar #
#
configure_menuselect()
{
	echo "Configuring menuselect options"
	make menuselect.makeopts

	BUILD_NATIVE=""
	SYSTEM_PRODUCT_NAME="`cat /sys/devices/virtual/dmi/id/product_name`"
	[ "$SYSTEM_PRODUCT_NAME" = "" ] && BUILD_NATIVE="--disable BUILD_NATIVE"
	[ "$SYSTEM_PRODUCT_NAME" = "VMware Virtual Platform" ] && BUILD_NATIVE="--disable BUILD_NATIVE"
	[ ! -z "$BUILD_NATIVE" ] && echo "WARNING: BUILD NATIVE DISABLED ($SYSTEM_PRODUCT_NAME)"

	REF_DEBUG=""
	# REF_DEBUG="--enable REF_DEBUG"
	menuselect/menuselect $REF_DEBUG $BUILD_NATIVE --enable DONT_OPTIMIZE --enable TEST_FRAMEWORK --enable DO_CRASH --enable BETTER_BACKTRACES --enable EXTRA-SOUNDS-EN-GSM menuselect.makeopts
}

install_testsuite_dependencies()
{
	# make sure dependencies are installed
	# this is run from testsuite root, giving access to contents
	install-packages python-pip python-setuptools PyYAML python-twisted-core lua-devel
	[ ! -d /usr/lib/python2.?/site-packages/construct ] && sudo pip install construct
	[ ! -d /usr/lib/python2.?/site-packages/requests ] && sudo pip install requests
	[ ! -d /usr/lib/python2.?/site-packages/autobahn ] && sudo pip install autobahn
	which sipp > /dev/null || install-sipp
	which pjsua > /dev/null || install-pjsua

	which asttest || (cd asttest ; make ; sudo make install ; cp /usr/local/bin/asttest /usr/bin)

	if [ -z "`pip list |fgrep starpy`" ] 
	then
		(cd addons && make update && cd starpy && sudo python setup.py install)
	fi

}


SYSLIBDIR="/usr/lib"
[ `uname -m` = "x86_64" ] && [ -d /usr/lib64 ] && SYSLIBDIR="/usr/lib64"

ASKINSTALL=true
INSTALL=false
VERDEST=false
DONTOPT=true
CERTIFIED=false

while [ "${1:0:1}" == "-" ]
do
	case "$1" in
	-i*)
		# go ahead and install too
		TO=${1:2}
		shift
		INSTALL=true
		ASKINSTALL=false
		if [ ! -z "$TO" ]
		then
			if [ "${TO:0:1}" = "/" ]
			then
				export INSTALL_PATH="$TO"
			else
				export INSTALL_PATH="$PWD/$TO"
			fi
		fi
		;;
	-n)
		# do not install and do not ask
		shift
		INSTALL=false
		ASKINSTALL=false
		;;
	-v)
		# dest dir is version only - no suffix
		shift
		VERDEST=true
		;;
	-c)
		# certified branch
		shift
		CERTIFIED=true
		;;
	-remenu)
		# reset everything, stop at menuselect
		[ ! -f ./configure ] && echo "ERROR: Not in an Asterisk directory" && exit 1
		make clean
		make distclean
		./configure --enable-dev-mode --libdir=$SYSLIBDIR
		configure_menuselect
		# 
		make menuselect
		exit
		;;
	-rebuild)
		# rebuild with extreme prejudice
		[ ! -f ./configure ] && echo "ERROR: Not in an Asterisk directory" && exit 1
		make clean
		make distclean
		./configure --enable-dev-mode --libdir=$SYSLIBDIR
		configure_menuselect
		make -j`nproc` 
		exit
		;;
	-vgrun)
		# run with valgrind
		shift
		sudo valgrind -q --log-file=/tmp/vg.log --num-callers=50 --error-limit=no --leak-check=no --undef-value-errors=no --suppressions=/home/$USER/testsuite-valgrind/configs/valgrind.supp asterisk -c $*
		exit
		;;
	-tls)
		# install tls
		set -ex
		[ `whoami` != 'root' ] && exec sudo env PATH=$PATH $0 -tls
		install_tls
		exit
		;;
	*)
		echo "ERROR: unknown argument: $1"
		exit 1
	esac
done

VERSION="$1"
SVNREV="$2"

VERSIONS=(
	'1.4'
	'1.6.2'
	'1.8'
	'10'
	'11'
	'12'
	'trunk'
)


if [ -z "$VERSION" ]
then
	COUNT=1
	for OPT in ${VERSIONS[*]}
	do
		echo "$COUNT: $OPT"
		COUNT=`expr $COUNT + 1`
	done

	echo ""
	echo -n "Select branch to install or enter version: "
	read SEL
	[ -z "$SEL" ] && echo "ERROR: no entry" && exit 1
	SEL=`expr $SEL - 1`
	VERSION="${VERSIONS[$SEL]}"
	[ -z "$VERSION" ] && VERSION="$SEL"
fi

SVNATREV=""
[ ! -z "$SVNREV" ] && SVNATREV="@$SVNREV"

#DEST="$VERSION-`date '+%F-%H-%M'`"
DEST="$VERSION"

# is that version in the list?
FOUND=0
for OPT in ${VERSIONS[*]}
do
	if [ "$VERSION" = "$OPT" ]
	then
		FOUND=1
	fi
done

	# is it testsuite?
	if [ "$VERSION" = "testsuite" ]
	then
		[ -d testsuite ] && echo "ERROR: testsuite directory already exists" && exit 1

		if [ -f ~/.subversion/Digium_SVN-cacert-sha1.pem ]
		then
			svn co https://origsvn.digium.com/svn/testsuite/asterisk/trunk testsuite
		else
			svn co http://svn.asterisk.org/svn/testsuite/asterisk/trunk testsuite
		fi
		cd testsuite
		install_testsuite_dependencies
		# stop here
		exit 0
	fi

# for now, presume always to install from SVN
#	if ! $VERDEST
#	then
#		DEST="$VERSION-release"
#	fi
#
#	# try to download exact version
#	wget -O /tmp/asterisk-$VERSION.tgz http://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-$VERSION.tar.gz
#	if [ $? -ne 0 ]
#	then
#		rm /tmp/asterisk-$VERSION.tgz
#		echo "ERROR: Unable to download $VERSION"
#		exit 1
#	fi
#	tar xvfz /tmp/asterisk-$VERSION.tgz
#	if [ ! -d asterisk-$VERSION ]
#	then
#		echo "ERROR: after tar extraction, directory asterisk-$VERSION not found"
#		exit 1
#	fi
#	mv asterisk-$VERSION $DEST
#else

	# get matching branch from svn
	TOPDIR="${VERSION%%/*}"
	case "$TOPDIR" in
	"trunk" | "team" | "certified")
		VERSIONPATH="$VERSION"
		;;
	*)
		VERSIONPATH="branches/$VERSION"
		;;
	esac
	if $CERTIFIED
	then
		VERSIONPATH="certified/$VERSIONPATH"
	fi
	FULLPATH="svn/asterisk/$VERSIONPATH"
	SVNURL="http://svn.asterisk.org/$FULLPATH"
	if [ -f ~/.subversion/Digium_SVN-cacert-sha1.pem ]
	then
		# user has digium svn access
		SVNURL="https://origsvn.digium.com/$FULLPATH"
	fi
	# use just the last portion of the path as the dest dir
	VERSION="${VERSION##*/}"

	# get the revision number
	if [ -z "$SVNREV" ]
	then
		REVISION="`svn info $SVNURL |fgrep Revision:`"
		[ -z "$REVISION" ] && echo "ERROR: unable to obtain svn revision number?" && exit 1
		REVNUM=${REVISION#*: }
	else
		# or used the supplied one
		REVNUM="$SVNREV"
	fi

	if ! $VERDEST
	then
		DEST="$VERSION-r$REVNUM"
		if $CERTIFIED
		then
			DEST="$VERSION-cert-r$REVNUM"
		fi
	fi

	[ -d "$DEST" ] && echo "Destination directory $DEST already exists!?" && exit 91
	mkdir $DEST

	echo "Downloading Asterisk $VERSION to directory $DEST"
	svn co $SVNURL$SVNATREV $DEST

#fi
cd $DEST

# dev mode is requsted by testsuite - use by default
CONFOPTS="--enable-dev-mode"

# for 64bit use correct lib dir
[ `uname -m` = "x86_64" ] && CONFOPTS="$CONFOPTS --libdir=/usr/lib64"

./configure $CONFOPTS || exit $?

#make menuselect || exit $?
configure_menuselect

make -j`nproc` || exit $?

if $ASKINSTALL 
then
    while echo -n "Install (y/n): " && read ANSWER
    do
    	if [ "$ANSWER" = "y" ]
    	then
            INSTALL=true
    		break
    	fi
    	if [ "$ANSWER" = "n" -o "$ANSWER" = "" ]
    	then
    		break
    	fi
    done
fi

if $INSTALL
then
	if [ -z "$INSTALL_PATH" ]
	then
		# presume that root installation is necessary using sudo
		while ! sudo make uninstall ; do echo -en '\007'; done
		while ! sudo make install ; do echo -en '\007'; done
		sudo /bin/bash -c '[ ! -f /etc/asterisk/asterisk.conf ] && make samples'
		if [ `uname -m` = "x86_64" ] 
		then
			# older asterisk.conf may have wrong path
			sudo sed -i '/^astmoddir/ s|/usr/lib/|/usr/lib64/|' /etc/asterisk/asterisk.conf
		fi
	else
		# installing locally - insure directory exists
		[ ! -d "$INSTALL_PATH" ] && mkdir -p "$INSTALL_PATH"
		[ ! -d "$INSTALL_PATH" ] && echo "ERROR: unable to craete INSTALL_PATH $INSTALL_PATH" && exit 1
		make install 

		if [ ! -f $INSTALL_PATH/etc/asterisk/extensions.conf ]
		then
			make samples
			# and fixup paths in asterisk.conf to match
			sed -i "s|=> /|=> $INSTALL_PATH/|" $INSTALL_PATH/etc/asterisk/
		fi
	fi
fi

echo "===> LEAVING BUILD DIRECTORY: `pwd`"
